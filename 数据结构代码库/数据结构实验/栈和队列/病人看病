#include <stdio.h>
# include <malloc.h> 
typedef struct qnode
{
	int data; //病历号
	struct qnode* next; //下一个结点指针
}QNode; //链队结点类型

typedef struct
{
	QNode* front, * rear;
}QuType; //声明链队类型
	
void Destroyqueue(QuType*& qu) //释放链队
{
	QNode* pre, * p;
	pre = qu->front; //若链队不空
	if (pre != NULL)
	{
		p = pre->next;
		while (p != NULL) //释放队列中所有数据结点
		{
			free(pre);
			pre = p;
			p = p->next;
		}
		free(pre);
	}
	free(qu); //释放链队结点
}

bool exist(QuType* qu, int no) //队列中是否有no病历号的病人
{
	bool find = false;
	QNode* p = qu->front;
	while (p != NULL && !find)
	{
		if (p->data == no) find = true;
		else p=p->next;
	}
	return find;
}

void Seedoctor() //模拟病人看病的过程
{
	int sel, no;
	bool flag = true;
	QuType* qu;
	QNode* p;
	qu = (QuType*)malloc(sizeof(QuType)); //创建空队
	qu->front = qu->rear = NULL;
	while (flag) //循环执行
	{
		printf(">1:排队 2:就诊 3:査看排队 4.不再排队,余下依次就诊 5:下班 请选择：");
		scanf("%d", &sel);
		switch (sel)
		{
		case 1: //排队
			printf("输入病历号：");
			while (true)
			{
				scanf("%d", &no);
				if (exist(qu, no)) printf("输入的病历号重复，重新输入：");
				else break;
			};
			p = (QNode*)malloc(sizeof(QNode)); //创建结点
			p->data = no;
			p->next = NULL;
			if (qu->rear == NULL) qu->front = qu->rear = p; //第一个病人排队	
			else
			{
				qu->rear->next = p; //将p结点进队
				qu->rear = p;
			}
			break;
		case 2: //就诊
			if (qu->front == NULL) printf("没有排队的病人!\n"); //队空
			else //队不空
			{
				p = qu->front;
				printf(">>病人%d就诊\n", p->data);
				if (qu->rear == p) qu->front = qu->rear = NULL; //只有一个病人排队的情况
				else qu->front = p->next;
				free(p);
			}
			break;
		case 3: //查看排队
			if (qu->front == NULL) printf("没有排队的病人!\n"); //队空
			else //队不空
			{
				p = qu->front;
				printf(" >>排队病人：");
				while (p != NULL)
				{
					printf("%d ", p->data);
					p = p->next;
				}
				printf("\n");
			}
			break;
		case 4: //不再排队,余下依次就诊
			if (qu->front == NULL)	printf(">>没有排队的病人！\n"); //队空
			else //队不空
			{
				p = qu->front;
				printf(" >>病人按以下顺序就诊：");
				while (p != NULL)
				{
					printf("%d ", p->data);
					p = p->next;
				}
				printf("\n");
			}
			Destroyqueue(qu); //释放链队
			flag = false; //退出
			break;
		case 5: //下班
			if (qu->front != NULL) printf("请排队的病人明天就医！\n"); //队不空
			flag = false; //退出
			Destroyqueue(qu); //释放链队
			break;
		}
	}
}

int main()
{
	Seedoctor();
	return 0;
}

