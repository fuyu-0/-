#include <stdio.h>
#include <stdlib.h>
#include <time.h>		 	//clock_t, clock, CLOCKS_PER_SEC
#include <math.h>

//------方法1-----------------------------------------------
bool prime1(long n) //方法1：判断正整数n是否为素数
{
	long i;
	for (i = 2; i < n; i++)
	if (n % i == 0)
		return false; //若n不是素数,则退出并返回false
	return true;
}

void PrimeTime1(long n) //采用方法1的耗时统计
{
	long sum = 0, i;
	clock_t t = clock();
	for (i = 2; i <= n; i++)
		if (prime1(i))
			sum++;
	t = clock() - t;
	printf("方法1:\n");
	printf("  结果:2～%d的素数个数:%d\n", n, sum);
	printf("  用时:%lf秒\n", ((float)t) / CLOCKS_PER_SEC);
}


//------方法2-----------------------------------------------
bool prime2(long n) //方法2：判断正整数n是否为素数
{
	long i;
	for (i = 2; i <= (int)sqrt((double)n); i++)//对n开方进行优化
	if (n % i == 0)
		return false; //若n不是素数,则退出并返回false
	return true;
}
void PrimeTime2(long n) //采用方法2的耗时统计
{
	long sum = 0, i;
	clock_t t = clock();
	for (i = 2; i <= n; i++)
		if (prime2(i))
			sum++;
	t = clock() - t;
	printf("方法2:\n");
	printf("  结果:2～%d的素数个数:%d\n", n, sum);
	printf("  用时:%lf秒\n", ((float)t) / CLOCKS_PER_SEC);
}


//------方法3-----------------------------------------------
int countPrimes(long n) //方法3：埃拉托色尼筛选法，空间换时间，n不能过大，否则程序报错
{
	bool *flag = (bool *)malloc(n * sizeof(bool));
	for (long i = 0; i < n; i++)//这步不能省略，否则得不到正确值
		flag[i] = 0;

	int count = 0;
	for (long i = 2; i < n; i++){
		if (flag[i] == 0){
			count++;
			for (long j = i; i * j < n; j++) {
				flag[i * j] = 1;
			}
		}
	}
	free(flag);
	return count;
}
void PrimeTime3(long n) //采用方法3的耗时统计
{
	long sum = 0;
	clock_t t = clock();
	sum = countPrimes(n);
	t = clock() - t;
	printf("方法3:\n");
	printf("  结果:2～%d的素数个数:%d\n", n, sum);
	printf("  用时:%lf秒\n", ((float)t) / CLOCKS_PER_SEC);
}

//------------------------------------------------------------
int main() {
	long n;
	printf("n（取值范围[10000, 40000]）:");
	scanf("%d", &n);
	if (!(10000 <= n && n <= 40000)) return 0;
	PrimeTime1(n);
	PrimeTime2(n);
	PrimeTime3(n);
	return 1;
}
